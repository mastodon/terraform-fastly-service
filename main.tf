# Fastly Service
resource "fastly_service_vcl" "service" {
  name = var.name

  # Basic service configuration
  activate       = var.activate
  default_ttl    = var.default_ttl
  http3          = var.http3
  stale_if_error = var.stale_if_error

  # Basic domain configuration
  dynamic "domain" {
    for_each = var.domains
    content {
      name    = domain.value.name
      comment = domain.value.comment
    }
  }

  # Backend configuration
  dynamic "backend" {
    for_each = var.backends
    content {
      name    = backend.value.name
      address = backend.value.address

      auto_loadbalance  = backend.value.auto_loadbalance
      healthcheck       = backend.value.healthcheck
      max_conn          = backend.value.max_conn
      max_tls_version   = backend.value.max_tls_version
      min_tls_version   = backend.value.min_tls_version
      override_host     = backend.value.override_host
      port              = backend.value.port
      shield            = backend.value.shield
      ssl_ca_cert       = var.backend_ssl_ca_cert != "" ? var.backend_ssl_ca_cert : backend.value.ssl_ca_cert
      ssl_cert_hostname = backend.value.ssl_cert_hostname
      ssl_sni_hostname  = backend.value.ssl_sni_hostname
      use_ssl           = backend.value.use_ssl
    }
  }

  # Healthcheck configuration
  dynamic "healthcheck" {
    for_each = var.healthchecks
    content {
      name = healthcheck.value.name
      host = healthcheck.value.host
      path = healthcheck.value.path

      check_interval    = healthcheck.value.check_interval
      expected_response = healthcheck.value.expected_response
      headers           = healthcheck.value.headers
      http_version      = healthcheck.value.http_version
      initial           = healthcheck.value.initial
      method            = healthcheck.value.method
      threshold         = healthcheck.value.threshold
      timeout           = healthcheck.value.timeout
      window            = healthcheck.value.window
    }
  }

  # Datadog logging
  dynamic "logging_datadog" {
    for_each = var.logging_datadog != null ? [1] : []
    content {
      name  = var.logging_datadog.name
      token = var.logging_datadog_token != "" ? var.logging_datadog_token : var.logging_datadog.token

      format = var.logging_datadog.format
      region = var.logging_datadog.region
    }
  }

  # Custom VCL snippets
  dynamic "snippet" {
    for_each = var.snippets
    content {
      name     = snippet.value.name
      content  = snippet.value.content
      type     = snippet.value.type
      priority = snippet.value.priority
    }
  }

  # Product flags
  product_enablement {
    brotli_compression = var.products.brotli_compression
    domain_inspector   = var.products.domain_inspector
    image_optimizer    = var.products.image_optimizer
    origin_inspector   = var.products.origin_inspector
    websockets         = var.products.websockets
  }

  # Headers & their conditions
  # Condition blocks are only generated when a header object specifies a condition.

  dynamic "condition" {
    for_each = [for i in var.headers : i if i.request_condition != ""]
    content {
      name      = "Generated by ${condition.value.name}"
      statement = condition.value.request_condition
      type      = condition.value.request_condition_type
      priority  = condition.value.request_condition_priority
    }
  }

  dynamic "condition" {
    for_each = [for i in var.headers : i if i.response_condition != ""]
    content {
      name      = "Generated by ${condition.value.name}"
      statement = condition.value.response_condition
      type      = condition.value.response_condition_type
      priority  = condition.value.response_condition_priority
    }
  }

  dynamic "header" {
    for_each = var.headers
    content {
      name        = header.value.name
      action      = header.value.action
      destination = header.value.destination
      type        = header.value.type

      cache_condition    = header.value.cache_condition
      ignore_if_set      = header.value.ignore_if_set
      priority           = header.value.priority
      regex              = header.value.regex
      request_condition  = header.value.request_condition != "" ? "Generated by ${header.value.name}" : ""
      response_condition = header.value.response_condition != "" ? "Generated by ${header.value.name}" : ""
      source             = header.value.source
      substitution       = header.value.substitution
    }
  }

  # Response objects & their conditions
  # Every response object generates a condition alongside it.

  dynamic "condition" {
    for_each = var.responses
    content {
      name      = "Generated by ${condition.value.name}"
      statement = condition.value.condition
      type      = condition.value.condition_type
      priority  = condition.value.condition_priority
    }
  }

  dynamic "response_object" {
    for_each = var.responses
    content {
      name = response_object.value.name

      content           = response_object.value.content
      content_type      = response_object.value.content_type
      request_condition = "Generated by ${response_object.value.name}"
      response          = response_object.value.response
      status            = response_object.value.status
    }
  }

  # Force TLS/HSTS settings
  # Creates similar objects to what the GUI switch creates.

  dynamic "request_setting" {
    for_each = var.force_tls_enable_hsts ? [1] : []
    content {
      name = "Generated by force TLS and enable HSTS"

      bypass_busy_wait = false
      force_miss       = false
      force_ssl        = true
      max_stale_age    = 0
      timer_support    = false
      xff              = ""
    }
  }

  dynamic "header" {
    for_each = var.force_tls_enable_hsts ? [1] : []
    content {
      action      = "set"
      destination = "http.Strict-Transport-Security"
      name        = "Generated by force TLS and enable HSTS"
      type        = "response"

      ignore_if_set = false
      priority      = 100
      source        = "\"max-age=${var.hsts_duration}\""
    }
  }

  # IP Blocklist settings
  # Creates similar objects & resources to what the GUI IP Blocklist creates.

  dynamic "acl" {
    for_each = length(var.ip_blocklist) > 0 ? [1] : []
    content {
      name = var.ip_blocklist_acl_name
    }
  }

  dynamic "condition" {
    for_each = length(var.ip_blocklist) > 0 ? [1] : []
    content {
      name      = "Generated by IP block list"
      priority  = 0
      statement = "client.ip ~ ${replace(var.ip_blocklist_acl_name, " ", "_")}"
      type      = "REQUEST"
    }
  }

  dynamic "response_object" {
    for_each = length(var.ip_blocklist) > 0 ? [1] : []
    content {
      name = "Generated by IP block list"

      content_type      = "text/html"
      request_condition = "Generated by IP block list"
      response          = "Forbidden"
      status            = 403
    }
  }

  # AS Blocklist settings
  # Any AS numbers that need to be blocked are added to a dictionary, and the
  # related condition/request objects are created.

  dynamic "dictionary" {
    for_each = var.as_blocklist
    content {
      name = var.as_blocklist_name
    }
  }

  dynamic "dictionary" {
    for_each = var.as_request_blocklist
    content {
      name = var.as_request_blocklist_name
    }
  }

  dynamic "condition" {
    for_each = length(var.as_blocklist) > 0 ? [1] : []
    content {
      name      = "Generated by ${var.as_blocklist_name}"
      priority  = 10
      statement = "table.lookup(Blocked_AS_Numbers, client.as.number) == \"block\""
      type      = "REQUEST"
    }
  }

  dynamic "condition" {
    for_each = length(var.as_request_blocklist) > 0 ? [1] : []
    content {
      name      = "Generated by ${var.as_request_blocklist_name}"
      priority  = 10
      statement = "table.lookup(Blocked_AS_Numbers_client_requests, client.as.number) == \"block\" && req.url.path ~ \"^/(api/|explore)\")"
      type      = "REQUEST"
    }
  }

  dynamic "response_object" {
    for_each = length(var.as_blocklist) > 0 ? [1] : []
    content {
      name = "Generated by ${var.as_blocklist_name}"

      content_type      = "text/html"
      request_condition = "Generated by ${var.as_blocklist_name}"
      response          = "Forbidden"
      status            = 403
    }
  }

  dynamic "response_object" {
    for_each = length(var.as_request_blocklist) > 0 ? [1] : []
    content {
      name = "Generated by ${var.as_request_blocklist_name}"

      content_type      = "text/html"
      request_condition = "Generated by ${var.as_request_blocklist_name}"
      response          = "Forbidden"
      status            = 403
    }
  }
}

# IP Blocklist entries
resource "fastly_service_acl_entries" "ip_blocklist_entries" {
  for_each = {
    for d in fastly_service_vcl.service.acl : d.name => d if d.name == var.ip_blocklist_acl_name
  }
  service_id = fastly_service_vcl.service.id
  acl_id     = each.value.acl_id

  dynamic "entry" {
    for_each = var.ip_blocklist
    content {
      ip      = split("/", entry.value)[0]
      subnet  = split("/", entry.value)[1]
      negated = false
      comment = "Generated by IP block list"
    }
  }
}

# AS Blocklist dictionary entries

resource "fastly_service_dictionary_items" "as_blocklist_entries" {
  for_each = {
    for d in fastly_service_vcl.service.dictionary : d.name => d if d.name == var.as_blocklist_name
  }
  service_id    = fastly_service_vcl.service.id
  dictionary_id = each.value.dictionary_id

  items = { for i in var.as_blocklist : i => "block" }
}

resource "fastly_service_dictionary_items" "as_request_blocklist_entries" {
  for_each = {
    for d in fastly_service_vcl.service.dictionary : d.name => d if d.name == var.as_request_blocklist_name
  }
  service_id    = fastly_service_vcl.service.id
  dictionary_id = each.value.dictionary_id

  items = { for i in var.as_request_blocklist : i => "block" }
}
